import numpy as np 
import nnfs 
import matplotlib.pyplot as plt 

from nnfs.datasets import spiral_data

#credit:
#https://cs231n.github.io/neural-networks-case-study/


nnfs.init() #does a couple useful things like sets default numpy datatype

np.random.seed(0)


class Layer_Dense:

    def __init__(self, n_inputs, n_neurons):
        #n_inputs is size of input coming in, and n_neurons is how many neurons we have

        #the shape is n_inputs x n_neurons not the other way round, so when we do a forward pass we dont have to take the transpose
        self.weights = 0.10 * np.random.randn(n_inputs, n_neurons)

        #biases is always a vector so we define it's shape with a 1
        self.biases = np.zeros((1, n_neurons))


    #inputs could be input or previous output
    def forward(self, inputs):
        self.output = np.dot(inputs, self.weights) + self.biases


class Activation_ReLU : 
    def forward(self, inputs) :
        self.output = np.maximum(0, inputs)


class Activation_Softmax: 
    def forward(self, inputs):
        exp_values = np.exp(inputs - np.max(inputs, axis = 1, keepdims = True))
        probabilities = exp_values / np.sum(exp_values, axis = 1, keepdims = True)
         
        self.output = probabilities
        #if we dont keep dimension of the array, may get any issue w dot produt



X, y = spiral_data(samples = 100, classes = 3)

#so let's make a first attempt at a pseudo, simple neural net
pass it to the ReLU for the first layer
dense1 = Layer_Dense(2,3)
activation1 = Activation_ReLU()

dense2 = Layer_Dense(3,3)
activation2 = Activation_Softmax()

dense1.forward(X)
activation1.forward(dense1.output)

dense2.forward(activation1.output)
activation2.forward(dense2.output)

print(activation2.output[:5])


 




