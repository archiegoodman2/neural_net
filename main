import numpy as np 

np.random.seed(0)



def main() :

  #lets define a training set 
    X = [[1, 2, 3, 2.5],
        [2.0, 5.0, -1.0, 2.0],
        [-1.5, 2.7, 3.3, -0.8]]

    #let's define our first hidden layer
    class Layer_Dense:

        def __init__(self, n_inputs, n_neurons):
            #n_inputs is size of input coming in, and n_neurons is how many neurons we have

            #the shape is n_inputs x n_neurons not the other way round, so when we do a forward pass we dont have to take the transpose
            self.weights = 0.10 * np.random.randn(n_inputs, n_neurons)

            #biases is always a vector so we define it's shape with a 1
            self.biases = np.zeros((1, n_neurons))


        #inputs could be input or previous output
        def forward(self, inputs):
            self.output = np.dot(inputs, self.weights) + self.biases

    
    class Activation_ReLU : 
        def forward(self, inputs) :
            self.output = np.maximum(0, inputs)

        
        
    #now we make our activation function 
            
    #step function = activation function, in this context
            
    #but sigmoid activation functions are a bit more practical as they have a more granular output
    #more granular = better because we get a better picture of the impact to the loss when you change the inputs 
            
    #i.e. we will know how close we were to outputting 1, for a given input
            
    #better yet, we will use the Rectified Linear (ReLU) Output function over sigmoid function. Why?
    #because sigmoid functions have the vanishing gradient problem (google this)
            
    #also faster (simple calculation) than sigmoid. and it works
            
    #so we're going to write a ReLU activation function (part 5 if you're following along)

    
         
            
    
            
        
    




main()


