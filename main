import numpy as np 

np.random.seed(0)



def main() :

  #lets define a training set 
    X = [[1, 2, 3, 2.5],
        [2.0, 5.0, -1.0, 2.0],
        [-1.5, 2.7, 3.3, -0.8]]

    #let's define our first hidden layer
    class Layer_Dense:

        def __init__(self, n_inputs, n_neurons):
            

            #n_inputs is size of input coming in, and n_neurons is how many neurons we have

            #the shape is n_inputs x n_neurons not the other way round, so when we do a forward pass we dont have to take the transpose
            self.weights = 0.10 * np.random.randn(n_inputs, n_neurons)

            #biases is always a vector so we define it's shape with a 1
            self.biases = np.zeros((1, n_neurons))


        #inputs could be input or previous output
        def forward(self, inputs):
            self.output = np.dot(inputs, self.weights)+ self.biases

        
    layer1 = Layer_Dense(4,5)
    layer2 = Layer_Dense(5,2)

    layer1.forward(X)  

    #print(layer1.output)

    layer2.forward(layer1.output)

    print(layer2.output)

      


main()


